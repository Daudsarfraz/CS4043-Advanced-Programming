project iRise "MetaMed VR"  2023-09-01 +1y {
  timezone "Asia/Karachi"
  timeformat "%Y-%m-%d"
  numberformat "-" "" "," "." 1
  currencyformat "(" ")" "," "." 0
  now 2024-07-09
  currency "USD"
}

# You can attach flags to accounts, resources and tasks. These can be
# used to filter out subsets of them during reporting.
flags important, hidden

# If you want to do budget planning for your project, you need to
# define some accounts.
account cost "Project Cost" {
  account dev "Development"
  account doc "Documentation"
}
account rev "Customer Payments"

# The Profit & Loss analysis should be rev - cost accounts.
balance cost rev

# Define your public holidays here.
vacation "Defence Day" 2023-09-06
vacation "Eid Milad un-Nabi" 2023-09-29
vacation "Iqbal Day" 2023-11-09 
vacation "Quaid-e-Azam Day" 2023-12-25
vacation "New Year's Eve" 2024-01-01
vacation "Kashmir Day" 2024-02-05
vacation "Election Day" 2024-02-08
vacation "Shab e-Barat" 2024-02-26
vacation "Pakistan Day" 2024-03-23
vacation "Eid-ul-Fitr" 2024-04-10
vacation "Eid-ul-Fitr Holiday" 2024-04-11
vacation "Eid-ul-Fitr Holiday" 2024-04-12
vacation "Eid-ul-Fitr Holiday" 2024-04-13
vacation "Labour Day" 2024-05-01
vacation "Youm-i-Takbeer" 2024-05-28
vacation "Eid al-Adha" 2024-06-17
vacation "Eid al-Adha Holiday" 2024-06-18
vacation "Eid al-Adha Holiday" 2024-06-19
vacation "Ashura Holiday" 2024-07-18 
vacation "Ashura" 2024-07-19
vacation "Independence Day" 2024-08-14
vacation "Defence Day" 2024-09-06



# This is a set of example resources.
resource supervisor "Dr. Muhammad Amin"
resource coordinator "Mr. Haroon Zafar" {
    managers supervisor
} 

resource t1 "Developer Team 1" {
    managers coordinator
    resource t1dev1 "Dawood Sarfraz"
}
resource t2 "Developer Team 2" {
    managers coordinator
    resource t2dev1 "Shoaib Akhtar"
}
resource t3 "Developer Team 3" {
    managers coordinator
    resource t3dev1 "Waleed Akram"
}

task project "MetaMed VR" {
    
    chargeset dev
    charge 50 perday
    responsible supervisor

    task wp0 "Literature Review" {
        priority 1000
        task w0t1 "Review Literature" {
            effort 15d
            allocate t1dev1, t2dev1, t3dev1
        }
    }

    task wp1 "Basic Hospital Environment" {
        priority 1000
        depends !wp0
        task w1t1 "Design and Develop Environment" {
            effort 25d
            allocate t1dev1, t2dev1
        }
    }

    task wp2 "Hospital Asset Development" {
        priority 1000
        depends !wp1
        task w2t1 "Develop Hospital Assets" {
            effort 30d
            allocate t1dev1, t3dev1
        }
    }

    task wp3 "Simulation" {
        priority 1000
        depends !wp2
        task w3t1 "Develop Simulation" {
            effort 40d
            allocate t1dev1, t2dev1
        }
    }

    task wp4 "Testing Functionalities" {
        priority 1000
        depends !wp3
        task w4t1 "Test Simulation and Features" {
            effort 20d
            allocate t1dev1, t3dev1
        }
    }

    task wp5 "Integration" {
        priority 1000
        depends !wp4
        task w5t1 "Integrate Components" {
            effort 30d
            allocate t1dev1, t3dev1
        }
    }

    task wp6 "Deployment" {
        priority 1000
        depends !wp5
        task w6t1 "Deploy System" {
            effort 20d
            allocate t2dev1, t3dev1
        }
    }

    task wp7 "Documentation" {
        priority 1000
        depends !wp6
        task w7t1 "Document System" {
            effort 15d
            allocate t2dev1, t3dev1
        }
    }
    
    task deliveries "Final Delivery" {
        purge chargeset
        chargeset rev

        task "WP0" {
            depends !!wp0
            charge 1000 onstart 
        }
        task "WP1" {
            depends !!wp1
            charge 1000 onstart 
        }
        task "WP2" {
            depends !!wp2
            charge 1000 onstart 
        }
        task "WP3" {
            depends !!wp3
            charge 1000 onstart 
        }
        task "WP4" {
            depends !!wp4
            charge 1000 onstart 
        }
        task "WP5" {
            depends !!wp5
            charge 1000 onstart 
        }
        task "WP6" {
            depends !!wp6
            charge 1000 onstart 
        }
        task "WP7" {
            depends !!wp7
            charge 1000 onstart 
        }
    }
}

# Now the project has been specified completely. Stopping here would
# result in a valid TaskJuggler file that could be processed and
# scheduled. Here reports will be generated to visualize the
# results.

navigator navbar {
  hidereport 0
}

macro TaskTip [
  tooltip istask() -8<-
    '''Start: ''' <-query attribute='start'->
    '''End: ''' <-query attribute='end'->
    ----
    '''Resources:'''

    <-query attribute='resources'->
    ----
    '''Precursors: '''

    <-query attribute='precursors'->
    ----
    '''Followers: '''

    <-query attribute='followers'->
    ->8-
]

textreport frame "" {
  header -8<-
    == MetaMed VR ==
    <[navigator id="navbar"]>
  ->8-
  footer "----"
  textreport index "Overview" {
    formats html
    center '<[report id="overview"]>'
  }

  textreport "Status" {
    formats html
    center -8<-
      <[report id="status.dashboard"]>
      ----
      <[report id="status.completed"]>
      ----
      <[report id="status.ongoing"]>
      ----
      <[report id="status.future"]>
    ->8-
  }

  textreport wps "Work packages" {
		textreport wp0 "Work package 0" {
      formats html
      center '<[report id="wp0"]>'
    }
    textreport wp1 "Work package 1" {
      formats html
      center '<[report id="wp1"]>'
    }
    textreport wp2 "Work package 2" {
      formats html
      center '<[report id="wp2"]>'
    }
		textreport wp4 "Work package 4" {
      formats html
      center '<[report id="wp4"]>'
    }
		textreport wp5 "Work package 5" {
      formats html
      center '<[report id="wp5"]>'
    }
		textreport wp6 "Work package 6" {
      formats html
      center '<[report id="wp6"]>'
    }
		textreport wp7 "Work package 7" {
      formats html
      center '<[report id="wp7"]>'
    }
  }

  textreport "Deliveries" {
    formats html
    center '<[report id="deliveries"]>'
  }

  textreport "ContactList" {
    formats html
    title "Contact List"
    center '<[report id="contactList"]>'
  }
  textreport "ResourceGraph" {
    formats html
    title "Resource Graph"
    center '<[report id="resourceGraph"]>'
  }
}

# A traditional Gantt chart with a project overview.
taskreport overview "" {
  header -8<-
    === Project Overview ===

    The project is structured into 2 work packages.

    # Specification
    # <-reportlink id='frame.wps.wp1'->
    # <-reportlink id='frame.wps.wp2'->
    # Testing

    === Original Project Plan ===
  ->8-
  columns bsi { title 'WBS' },
          name, start, end, effort, cost,
          revenue, chart { ${TaskTip} scale month width 900 }
  # For this report we like to have the abbreviated weekday in front
  # of the date. %a is the tag for this.
  timeformat "%Y-%m-%d"
  loadunit days
  hideresource 1
  balance cost rev
  caption 'All effort values are in man days.'

  footer -8<-
    === Staffing ===

    All project phases are properly staffed. See [[ResourceGraph]] for
    detailed resource allocations.

    === Current Status ===

    Some blurb about the current situation.
  ->8-
}

# Macro to set the background color of a cell according to the alert
# level of the task.
macro AlertColor [
  cellcolor plan.alert = 0 "#90FF90" # green
  cellcolor plan.alert = 1 "#FFFF90" # yellow
  cellcolor plan.alert = 2 "#FF9090" # red
]

taskreport status "" {
  columns bsi { width 50 title 'WBS' }, name { width 150 },
          start { width 100 }, end { width 100 },
          effort { width 100 },
          alert { tooltip plan.journal
                          != '' "<-query attribute='journal'->" width 150 },
          status { width 150 }

  taskreport dashboard "" {
    headline "Project Dashboard (<-query attribute='now'->)"
    columns name { title "Task" ${AlertColor} width 200},
            resources { width 200 ${AlertColor}
                        listtype bullets
                        listitem "<-query attribute='name'->"
                        start ${projectstart} end ${projectend} },
            alerttrend { title "Trend" ${AlertColor} width 50 },
            journal { width 350 ${AlertColor} }
    journalmode status_up
    journalattributes headline, author, date, summary, details
    hidetask ~hasalert(0)
    sorttasks alert.down, plan.end.up
    period %{${now} - 1w} +1w
  }
  taskreport completed "" {
    headline "Already completed tasks"
    hidetask ~(plan.end <= ${now})
  }
  taskreport ongoing "" {
    headline "Ongoing tasks"
    hidetask ~((plan.start <= ${now}) & (plan.end > ${now}))
  }
  taskreport future "" {
    headline "Future tasks"
    hidetask ~(plan.start > ${now})
  }
}

# A list of tasks showing the resources assigned to each task.
taskreport wp0 "" {
  headline "Work package 0 - Resource Allocation Report"
  columns bsi { title 'WBS' }, name, start, end, effort { title "Work" },
          duration, chart { ${TaskTip} scale day width 1150 }
  timeformat "%Y-%m-%d"
  hideresource ~(isleaf() & isleaf_())
  sortresources name.up
  taskroot project.wp0
}
taskreport wp1 "" {
  headline "Work package 1 - Resource Allocation Report"
  columns bsi { title 'WBS' }, name, start, end, effort { title "Work" },
          duration, chart { ${TaskTip} scale day width 1150 }
  timeformat "%Y-%m-%d"
  hideresource ~(isleaf() & isleaf_())
  sortresources name.up
  taskroot project.wp1
}
# A list of tasks showing the resources assigned to each task.
taskreport wp2 "" {
  headline "Work package 2 - Resource Allocation Report"
  columns bsi { title 'WBS' }, name, start, end, effort { title "Work" },
          duration, chart { ${TaskTip} scale day width 1150 }
  timeformat "%Y-%m-%d"
  hideresource ~(isleaf() & isleaf_())
  sortresources name.up
  taskroot project.wp2
}
# A list of tasks showing the resources assigned to each task.
taskreport wp4 "" {
  headline "Work package 4 - Resource Allocation Report"
  columns bsi { title 'WBS' }, name, start, end, effort { title "Work" },
          duration, chart { ${TaskTip} scale day width 1150 }
  timeformat "%Y-%m-%d"
  hideresource ~(isleaf() & isleaf_())
  sortresources name.up
  taskroot project.wp4
}
# A list of tasks showing the resources assigned to each task.
taskreport wp5 "" {
  headline "Work package 5 - Resource Allocation Report"
  columns bsi { title 'WBS' }, name, start, end, effort { title "Work" },
          duration, chart { ${TaskTip} scale day width 1150 }
  timeformat "%Y-%m-%d"
  hideresource ~(isleaf() & isleaf_())
  sortresources name.up
  taskroot project.wp5
}
# A list of tasks showing the resources assigned to each task.
taskreport wp6 "" {
  headline "Work package 6 - Resource Allocation Report"
  columns bsi { title 'WBS' }, name, start, end, effort { title "Work" },
          duration, chart { ${TaskTip} scale day width 1150 }
  timeformat "%Y-%m-%d"
  hideresource ~(isleaf() & isleaf_())
  sortresources name.up
  taskroot project.wp6
}
# A list of tasks showing the resources assigned to each task.
taskreport wp7 "" {
  headline "Work package 7 - Resource Allocation Report"
  columns bsi { title 'WBS' }, name, start, end, effort { title "Work" },
          duration, chart { ${TaskTip} scale day width 1150 }
  timeformat "%Y-%m-%d"
  hideresource ~(isleaf() & isleaf_())
  sortresources name.up
  taskroot project.wp7
}


# A list of all tasks with the percentage completed for each task
taskreport deliveries "" {
  headline "Project Deliverables"
  columns bsi { title 'WBS' }, name, start, end, note { width 150 }, complete,
          chart { ${TaskTip} }
  taskroot project.deliveries
  hideresource 1
}
# A list of all employees with their contact details.
resourcereport contactList "" {
  headline "Contact list and duty plan"
  columns name,
          email { celltext 1 "[mailto:<-email-> <-email->]" },
          managers { title "Manager" },
          chart { scale day }
  hideresource ~isleaf()
  sortresources name.up
  hidetask 1
}

# A graph showing resource allocation. It identifies whether each
# resource is under- or over-allocated for.
resourcereport resourceGraph "" {
  headline "Resource Allocation Graph"
  columns no, name, effort, rate, monthly { ${TaskTip} width 800 }
  loadunit shortauto
  # We only like to show leaf tasks for leaf resources.
  hidetask ~(isleaf() & isleaf_())
  sorttasks plan.start.up
}

